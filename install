# /install
#!/usr/bin/env bash
LOG="${HOME}/Library/Logs/dotfiles.log"
GITHUB_USER="julesros"
GITHUB_REPO="that_is_my_shit"
USER_GIT_AUTHOR_NAME: $USER_GIT_AUTHOR_NAME
USER_GIT_AUTHOR_EMAIL: $USER_GIT_AUTHOR_EMAIL
DIR="/opt/${GITHUB_REPO}"

_process() {
  echo "$(date) PROCESSING:  $@" >> $LOG
  printf "$(tput setaf 6) %s...$(tput sgr0)\n" "$@"
}

_success() {
  local message=$1
  printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}

_warning() {
  echo "$(date) WARNING:  $@" >> $LOG
  printf "$(tput setaf 3)⚠ Warning:$(tput sgr0) %s!\n" "$@"
}

download_dotfiles() {
  _process "→ Creating directory at ${DIR} and setting permissions"
  # Ask for sudo privileges
  _process "Please enter your sudo password:"
  sudo -v
  # Check if sudo was successful
  if [ $? -eq 0 ]; then
      # Run the first command with sudo
      sudo mkdir -p "${DIR}"
      sudo chown $USER:admin "${DIR}"

      # Release sudo privileges
      sudo -k
  else
    _process "Sudo authentication failed. Exiting."
    exit 1
  fi


  _process "→ Downloading repository to /tmp directory"
  curl -#fLo /tmp/${GITHUB_REPO}.tar.gz "https://github.com/${GITHUB_USER}/${GITHUB_REPO}/tarball/main"

  _process "→ Extracting files to ${DIR}"
  tar -zxf /tmp/${GITHUB_REPO}.tar.gz --strip-components 1 -C "${DIR}"

  _process "→ Removing tarball from /tmp directory"
  rm -rf /tmp/${GITHUB_REPO}.tar.gz

  [[ $? ]] && _success "${DIR} created, repository downloaded and extracted"

  # Change to the dotfiles directory
  cd "${DIR}"
}

link_dotfiles() {
  # symlink files to the HOME directory.
  if [[ -f "${DIR}/opt/files" ]]; then
    _process "→ Symlinking dotfiles in /configs"

    # Set variable for list of files
    files="${DIR}/opt/files"

    # Store IFS separator within a temp variable
    OIFS=$IFS
    # Set the separator to a carriage return & a new line break
    # read in passed-in file and store as an array
    IFS=$'\r\n'
    links=($(cat "${files}"))

    # Loop through array of files
    for index in ${!links[*]}
    do
      for link in ${links[$index]}
      do
        _process "→ Linking ${links[$index]}"
        # set IFS back to space to split string on
        IFS=$' '
        # create an array of line items
        file=(${links[$index]})

        # Check if the file exists in the HOME directory
        if [[ -e "${HOME}/${file[1]}" ]]; then
          # Backup the existing file with a .bak suffix
          mv "${HOME}/${file[1]}" "${HOME}/${file[1]}.bak"
          _process "→ Moved existing ${file[1]} to ${file[1]}.bak"
        fi

        # Create symbolic link
        ln -fs "${DIR}/${file[0]}" "${HOME}/${file[1]}"
      done
      # set separater back to carriage return & new line break
      IFS=$'\r\n'
    done

    # Reset IFS back
    IFS=$OIFS

    # source "${HOME}/.bash_profile"

    [[ $? ]] && _success "All files have been copied"
  fi
}

install_homebrew() {
  _process "→ Installing Homebrew"
  if ! hash brew
  then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    _process "→ Running brew doctor"
    brew doctor
    [[ $? ]] \
    && _success "Installed Homebrew"
  else
    _process "✓ Homebrew already installed"
  fi
}

install_tap_casks() {
  if ! type -P 'brew' &> /dev/null; then
    _error "Homebrew not found"
  else
    _process "→ Installing Homebrew (casks)"

    # Update and upgrade all packages
    _process "→ Updating and upgrading Homebrew packages"
    brew update
    brew upgrade

    # Work utils
    brew list visual-studio-code || brew install --cask visual-studio-code
    brew list slack || brew install --cask slack
    brew list iterm2 || brew install --cask iterm2

    brew cleanup

    [[ $? ]] && _success "All Homebrew casks packages installed and updated"
  fi
}

install_formulae() {
  if ! type -P 'brew' &> /dev/null; then
    _error "Homebrew not found"
  else
    _process "→ Installing Homebrew packages"

    # Set variable for list of homebrew formulaes
    brews="${DIR}/opt/homebrew"

    # Update and upgrade all packages
    _process "→ Updating and upgrading Homebrew packages"
    brew update
    brew upgrade

    # Tap some necessary formulae
    brew tap homebrew/core

    # Store IFS within a temp variable
    OIFS=$IFS

    # Set the separator to a carriage return & a new line break
    # read in passed-in file and store as an array
    IFS=$'\r\n' formulae=($(cat "${brews}"))

    # Loop through split list of formulae
    _process "→ Checking status of desired Homebrew formulae"
    for index in ${!formulae[*]}
    do
      # Test whether a Homebrew formula is already installed
      if ! brew list ${formulae[$index]} &> /dev/null; then
        brew install ${formulae[$index]}
      fi
    done

    # Reset IFS back
    IFS=$OIFS

    brew cleanup

    [[ $? ]] && _success "All Homebrew packages installed and updated"
  fi
}

install_node() {
  brew list nvm || brew install nvm
  source "${HOME}/.zshrc"

  # Check if Node.js is installed using NVM
  if [ -n "$(nvm which current)" ]; then
      echo "Node.js is installed using NVM."

      # Print the Node.js version
      node_version=$(node -v)
      _process "Node.js version: $node_version"
  else
    _process "Node.js is not installed using NVM."
    nvm install node
  fi
}

install_zsh() {
  _process"installing zsh and oh-my-zsh"
  brew list zsh || brew install zsh

  if [ -d ~/.oh-my-zsh ]; then
    _process "oh-my-zsh is already installed"
  else
    _process"oh-my-zsh is not installed"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  fi
}

# /install
setup_git_authorship() {
  GIT_AUTHOR_NAME=eval "git config user.name"
  GIT_AUTHOR_EMAIL=eval "git config user.email"

  if [[ ! -z "$GIT_AUTHOR_NAME" ]]; then
    _process "→ Setting up Git author"

    read USER_GIT_AUTHOR_NAME
    if [[ ! -z "$USER_GIT_AUTHOR_NAME" ]]; then
      GIT_AUTHOR_NAME="${USER_GIT_AUTHOR_NAME}"
      $(git config --global user.name "$GIT_AUTHOR_NAME")
    else
      _warning "No Git user name has been set.  Please update manually"
    fi

    read USER_GIT_AUTHOR_EMAIL
    if [[ ! -z "$USER_GIT_AUTHOR_EMAIL" ]]; then
      GIT_AUTHOR_EMAIL="${USER_GIT_AUTHOR_EMAIL}"
      $(git config --global user.email "$GIT_AUTHOR_EMAIL")
    else
      _warning "No Git user email has been set.  Please update manually"
    fi
  else
    _process "→ Git author already set, moving on..."
  fi
}

install_dbs() {
  # Check if Redis is installed
  if brew ls --versions redis > /dev/null; then
      _process "Redis is already installed."

      # Check if Redis service is running
      if brew services list | grep -q "redis"; then
          _process "Redis service is already running."
      else
          _process "Starting Redis service..."
          brew services run redis
          _process "Redis service started."
      fi
  else
      _process "Redis is not installed. Installing Redis..."
      brew install redis

      # Start the Redis service
      _process "Starting Redis service..."
      brew services run redis
      _process "Redis service started."
  fi

  # Check if PostgreSQL is installed
  if brew ls --versions postgresql > /dev/null; then
      echo "PostgreSQL is already installed."

      # Check if PostgreSQL service is running
      if brew services list | grep -q "postgresql"; then
          echo "PostgreSQL service is already running."
      else
          echo "Starting PostgreSQL service..."
          brew services run postgresql
          echo "PostgreSQL service started."
      fi
  else
      echo "PostgreSQL is not installed. Installing PostgreSQL..."
      brew install postgresql

      # Start the PostgreSQL service
      echo "Starting PostgreSQL service..."
      brew services run postgresql
      echo "PostgreSQL service started."
  fi
}

install() {
  install_homebrew
  install_zsh
  install_tap_casks
  install_formulae
  download_dotfiles
  link_dotfiles
  setup_git_authorship
  install_node
  install_dbs
}

install
